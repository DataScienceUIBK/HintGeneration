import os
import json
import argparse
import shutil
import wget
from utils.Hint_Generation.Hint_Generation import Hint_Generation
from utils.Hint_Evaluation.Hint_Evaluation import Hint_Evaluation
from utils.Clean_File import Clean_File
from termcolor import colored


def main(args):
    with open('./models.json', mode='r', encoding='utf8') as f:
        models = json.load(f)
    model = args.model
    if model not in models:
        print(f'The model must be one of the following models: {list(models.keys())}')
        return
    model_link = models[model]['model']
    base_url = models[model]['base_url']

    input_file = args.input_file
    output_file = args.output_file
    generation_api_key = args.generation_api_key
    evaluation_api_key = args.evaluation_api_key
    num_of_hints = args.num_of_hints

    try:
        url = 'https://huggingface.co/datasets/JamshidJDMY/TriviaHG/resolve/main/qc_model/best_qc_model.pickle?download=true'
        output = './utils/Hint_generation/Question_Classification/best_qc_model.pickle'
        if not os.path.exists(output):
            wget.download(url, output)
            print('File downloaded successfully')
    except Exception as e:
        print('Failed to download file:', e)

    if not os.path.exists('./outputs'):
        os.mkdir('./outputs')

    print(colored(f'{model}:', attrs=['bold'], color='green'))
    print()
    hint_generation = Hint_Generation(base_url=base_url, api_key=generation_api_key, model=model, model_link=model_link,
                                      input_file=input_file, num_of_hints=num_of_hints)
    hint_generation.generate()

    hint_evaluation = Hint_Evaluation(base_url=base_url, api_key=evaluation_api_key, model=model)
    hint_evaluation.evaluate()

    clean_file = Clean_File(model)
    clean_file.clean()

    if os.path.exists(f'./outputs/FINAL_OUTPUT/{model}.json'):
        shutil.copy(f'./outputs/FINAL_OUTPUT/{model}.json', output_file)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='This script generates hints based on the input file and also evaluates the hints according to convergence and familiarity quality attributes.')

    parser.add_argument('--input_file', type=str,
                        help='The file containing the questions for which the model generates hints.',
                        required=True)
    parser.add_argument('--output_file', type=str,
                        help='"The path where the output file will be saved."',
                        required=True)
    parser.add_argument('--model', type=str, help='The model utilized for generating hints.', required=True)
    parser.add_argument('--num_of_hints', type=str, help='The desired number of hints to be generated by the model.',
                        required=True)
    parser.add_argument('--generation_api_key', type=str,
                        help='The API key required to access the API functions to generate hints.', required=True)
    parser.add_argument('--evaluation_api_key', type=str,
                        help='The API key required to access the AnyScale API functions for evaluating hints.',
                        required=True)

    args = parser.parse_args()

    main(args)
